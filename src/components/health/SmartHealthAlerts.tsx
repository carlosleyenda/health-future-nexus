
import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Progress } from '@/components/ui/progress';
import { 
  AlertTriangle, 
  Heart, 
  Activity, 
  TrendingUp, 
  TrendingDown,
  Clock,
  Target,
  Zap,
  Shield
} from 'lucide-react';

interface SmartHealthAlertsProps {
  patientId: string;
}

interface HealthAlert {
  id: string;
  type: 'critical' | 'warning' | 'info' | 'success';
  title: string;
  message: string;
  metric: string;
  currentValue: number;
  normalRange: { min: number; max: number };
  severity: 'high' | 'medium' | 'low';
  timestamp: string;
  recommendations: string[];
  autoGenerated: boolean;
}

export default function SmartHealthAlerts({ patientId }: SmartHealthAlertsProps) {
  const [alerts, setAlerts] = useState<HealthAlert[]>([]);
  const [healthScore, setHealthScore] = useState(87);

  useEffect(() => {
    // Simulate smart health alerts generation
    const generateSmartAlerts = () => {
      const currentTime = new Date().toISOString();
      
      const smartAlerts: HealthAlert[] = [
        {
          id: 'alert-1',
          type: 'critical',
          title: 'Frecuencia Cardíaca Anómala',
          message: 'Tu frecuencia cardíaca promedio ha aumentado 15% en las últimas 48 horas',
          metric: 'heart_rate',
          currentValue: 88,
          normalRange: { min: 60, max: 80 },
          severity: 'high',
          timestamp: currentTime,
          recommendations: [
            'Evita ejercicio intenso por 24 horas',
            'Aumenta la hidratación',
            'Considera técnicas de relajación',
            'Contacta a tu médico si persiste'
          ],
          autoGenerated: true
        },
        {
          id: 'alert-2',
          type: 'warning',
          title: 'Patrón de Sueño Irregular',
          message: 'Detectamos interrupciones frecuentes en tu ciclo de sueño REM',
          metric: 'sleep_quality',
          currentValue: 65,
          normalRange: { min: 80, max: 100 },
          severity: 'medium',
          timestamp: currentTime,
          recommendations: [
            'Mantén un horario de sueño regular',
            'Evita pantallas 1 hora antes de dormir',
            'Considera meditación nocturna',
            'Revisa la temperatura de tu habitación'
          ],
          autoGenerated: true
        },
        {
          id: 'alert-3',
          type: 'success',
          title: 'Excelente Control de Glucosa',
          message: 'Tus niveles de glucosa han permanecido estables durante 7 días',
          metric: 'glucose',
          currentValue: 95,
          normalRange: { min: 80, max: 110 },
          severity: 'low',
          timestamp: currentTime,
          recommendations: [
            'Mantén tu dieta actual',
            'Continúa con tu rutina de ejercicio',
            'Sigue monitoreando regularmente'
          ],
          autoGenerated: true
        },
        {
          id: 'alert-4',
          type: 'warning',
          title: 'Nivel de Estrés Elevado',
          message: 'Tu variabilidad cardíaca indica estrés sostenido en las últimas 72 horas',
          metric: 'stress_level',
          currentValue: 7,
          normalRange: { min: 1, max: 4 },
          severity: 'medium',
          timestamp: currentTime,
          recommendations: [
            'Practica técnicas de respiración profunda',
            'Considera pausas activas durante el trabajo',
            'Aumenta actividades relajantes',
            'Evalúa factores estresantes actuales'
          ],
          autoGenerated: true
        }
      ];

      setAlerts(smartAlerts);
    };

    generateSmartAlerts();

    // Simulate real-time alert updates
    const interval = setInterval(() => {
      generateSmartAlerts();
    }, 30000); // Update every 30 seconds

    return () => clearInterval(interval);
  }, [patientId]);

  const getAlertIcon = (type: string) => {
    switch (type) {
      case 'critical': return <AlertTriangle className="h-5 w-5 text-red-500" />;
      case 'warning': return <Clock className="h-5 w-5 text-yellow-500" />;
      case 'info': return <Activity className="h-5 w-5 text-blue-500" />;
      case 'success': return <Shield className="h-5 w-5 text-green-500" />;
      default: return <Heart className="h-5 w-5" />;
    }
  };

  const getAlertColor = (type: string) => {
    switch (type) {
      case 'critical': return 'destructive';
      case 'warning': return 'default';
      case 'info': return 'secondary';
      case 'success': return 'outline';
      default: return 'outline';
    }
  };

  const getTrendIcon = (currentValue: number, normalRange: { min: number; max: number }) => {
    if (currentValue > normalRange.max) {
      return <TrendingUp className="h-4 w-4 text-red-500" />;
    } else if (currentValue < normalRange.min) {
      return <TrendingDown className="h-4 w-4 text-blue-500" />;
    }
    return <Target className="h-4 w-4 text-green-500" />;
  };

  const calculateHealthImpact = (severity: string) => {
    switch (severity) {
      case 'high': return -5;
      case 'medium': return -2;
      case 'low': return 1;
      default: return 0;
    }
  };

  const dismissAlert = (alertId: string) => {
    setAlerts(prev => prev.filter(alert => alert.id !== alertId));
  };

  return (
    <div className="space-y-6">
      {/* Health Score Overview */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center justify-between">
            <span className="flex items-center gap-2">
              <Zap className="h-5 w-5 text-purple-500" />
              Puntuación de Salud Inteligente
            </span>
            <div className="text-right">
              <div className="text-2xl font-bold text-purple-600">{healthScore}/100</div>
              <div className="text-sm text-gray-500">Actualizado en tiempo real</div>
            </div>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <Progress value={healthScore} className="h-3" />
          <p className="text-sm text-gray-600 mt-2">
            Basado en {alerts.length} métricas activas y tendencias de salud
          </p>
        </CardContent>
      </Card>

      {/* Smart Alerts */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <AlertTriangle className="h-5 w-5 text-orange-500" />
            Alertas Inteligentes de Salud
          </CardTitle>
          <p className="text-sm text-gray-600">
            Análisis automático basado en inteligencia artificial
          </p>
        </CardHeader>
        <CardContent className="space-y-4">
          {alerts.map((alert) => (
            <Alert key={alert.id} className="border-l-4">
              <div className="flex items-start gap-4">
                {getAlertIcon(alert.type)}
                <div className="flex-1 space-y-3">
                  <div className="flex items-center justify-between">
                    <div>
                      <h4 className="font-medium flex items-center gap-2">
                        {alert.title}
                        {getTrendIcon(alert.currentValue, alert.normalRange)}
                      </h4>
                      <p className="text-sm text-gray-600 mt-1">{alert.message}</p>
                    </div>
                    <div className="flex items-center gap-2">
                      <Badge variant={getAlertColor(alert.type)}>
                        {alert.type === 'critical' ? 'Crítico' : 
                         alert.type === 'warning' ? 'Atención' : 
                         alert.type === 'success' ? 'Excelente' : 'Información'}
                      </Badge>
                      <Button 
                        variant="ghost" 
                        size="sm"
                        onClick={() => dismissAlert(alert.id)}
                      >
                        ✕
                      </Button>
                    </div>
                  </div>

                  {/* Metric Details */}
                  <div className="bg-gray-50 p-3 rounded-lg">
                    <div className="flex items-center justify-between text-sm">
                      <span>Valor Actual:</span>
                      <span className="font-medium">{alert.currentValue}</span>
                    </div>
                    <div className="flex items-center justify-between text-sm">
                      <span>Rango Normal:</span>
                      <span className="text-gray-600">
                        {alert.normalRange.min} - {alert.normalRange.max}
                      </span>
                    </div>
                    <Progress 
                      value={Math.min(100, (alert.currentValue / alert.normalRange.max) * 100)} 
                      className="h-2 mt-2"
                    />
                  </div>

                  {/* AI Recommendations */}
                  <div className="space-y-2">
                    <h5 className="text-sm font-medium flex items-center gap-2">
                      <Target className="h-4 w-4" />
                      Recomendaciones IA
                    </h5>
                    <div className="space-y-1">
                      {alert.recommendations.map((rec, index) => (
                        <div key={index} className="flex items-start gap-2 text-sm">
                          <span className="text-blue-500 mt-1">•</span>
                          <span className="text-gray-700">{rec}</span>
                        </div>
                      ))}
                    </div>
                  </div>

                  {/* Timestamp and Auto-generated Badge */}
                  <div className="flex items-center justify-between text-xs text-gray-500">
                    <span>{new Date(alert.timestamp).toLocaleString('es-MX')}</span>
                    {alert.autoGenerated && (
                      <Badge variant="outline" className="text-xs">
                        Generado por IA
                      </Badge>
                    )}
                  </div>
                </div>
              </div>
            </Alert>
          ))}

          {alerts.length === 0 && (
            <div className="text-center py-8">
              <Shield className="h-12 w-12 mx-auto text-green-500 mb-4" />
              <h3 className="text-lg font-medium mb-2">¡Todo se ve bien!</h3>
              <p className="text-gray-600">
                No hay alertas de salud en este momento. Tus métricas están dentro de rangos normales.
              </p>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}
